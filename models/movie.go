// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Movie movie
//
// swagger:model movie
type Movie struct {

	// genre
	// Min Length: 2
	Genre string `json:"genre,omitempty"`

	// id
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// title
	// Required: true
	// Min Length: 2
	Title *string `json:"title"`
}

// Validate validates this movie
func (m *Movie) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGenre(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Movie) validateGenre(formats strfmt.Registry) error {

	if swag.IsZero(m.Genre) { // not required
		return nil
	}

	if err := validate.MinLength("genre", "body", string(m.Genre), 2); err != nil {
		return err
	}

	return nil
}

func (m *Movie) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	if err := validate.MinLength("title", "body", string(*m.Title), 2); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Movie) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Movie) UnmarshalBinary(b []byte) error {
	var res Movie
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
