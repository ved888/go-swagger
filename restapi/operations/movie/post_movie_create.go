// Code generated by go-swagger; DO NOT EDIT.

package movie

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostMovieCreateHandlerFunc turns a function with the right signature into a post movie create handler
type PostMovieCreateHandlerFunc func(PostMovieCreateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostMovieCreateHandlerFunc) Handle(params PostMovieCreateParams) middleware.Responder {
	return fn(params)
}

// PostMovieCreateHandler interface for that can handle valid post movie create params
type PostMovieCreateHandler interface {
	Handle(PostMovieCreateParams) middleware.Responder
}

// NewPostMovieCreate creates a new http.Handler for the post movie create operation
func NewPostMovieCreate(ctx *middleware.Context, handler PostMovieCreateHandler) *PostMovieCreate {
	return &PostMovieCreate{Context: ctx, Handler: handler}
}

/*
PostMovieCreate swagger:route POST /movie/create movie postMovieCreate

create movie by given payload.

create movie by given fields is title and genre
*/
type PostMovieCreate struct {
	Context *middleware.Context
	Handler PostMovieCreateHandler
}

func (o *PostMovieCreate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostMovieCreateParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
