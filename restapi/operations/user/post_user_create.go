// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostUserCreateHandlerFunc turns a function with the right signature into a post user create handler
type PostUserCreateHandlerFunc func(PostUserCreateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostUserCreateHandlerFunc) Handle(params PostUserCreateParams) middleware.Responder {
	return fn(params)
}

// PostUserCreateHandler interface for that can handle valid post user create params
type PostUserCreateHandler interface {
	Handle(PostUserCreateParams) middleware.Responder
}

// NewPostUserCreate creates a new http.Handler for the post user create operation
func NewPostUserCreate(ctx *middleware.Context, handler PostUserCreateHandler) *PostUserCreate {
	return &PostUserCreate{Context: ctx, Handler: handler}
}

/*
PostUserCreate swagger:route POST /user/create user postUserCreate

create user by given payload.

create user by given fields
*/
type PostUserCreate struct {
	Context *middleware.Context
	Handler PostUserCreateHandler
}

func (o *PostUserCreate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostUserCreateParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
