// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "From the movie detail on go swagger.io",
    "title": "Movie",
    "version": "0.1.0"
  },
  "paths": {
    "/movie/create": {
      "post": {
        "description": "create movie by given fields is title and genre",
        "tags": [
          "movie"
        ],
        "summary": "create movie by given payload.",
        "parameters": [
          {
            "description": "create movie with the input payload.",
            "name": "movie",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/movie"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "create the movie operations",
            "schema": {
              "$ref": "#/definitions/movie"
            }
          },
          "default": {
            "description": "failed to create movie",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/movie/get": {
      "get": {
        "description": "get movie by the given movie id.",
        "tags": [
          "movie"
        ],
        "summary": "get movie by given id.",
        "parameters": [
          {
            "type": "string",
            "description": "get movie by given id",
            "name": "id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "get the movie operations",
            "schema": {
              "$ref": "#/definitions/movie"
            }
          },
          "default": {
            "description": "failed to get movie",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "movie": {
      "type": "object",
      "required": [
        "title"
      ],
      "properties": {
        "genre": {
          "type": "string",
          "minLength": 2
        },
        "id": {
          "type": "integer",
          "format": "uuid.uuid",
          "readOnly": true
        },
        "title": {
          "type": "string",
          "minLength": 2
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "From the movie detail on go swagger.io",
    "title": "Movie",
    "version": "0.1.0"
  },
  "paths": {
    "/movie/create": {
      "post": {
        "description": "create movie by given fields is title and genre",
        "tags": [
          "movie"
        ],
        "summary": "create movie by given payload.",
        "parameters": [
          {
            "description": "create movie with the input payload.",
            "name": "movie",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/movie"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "create the movie operations",
            "schema": {
              "$ref": "#/definitions/movie"
            }
          },
          "default": {
            "description": "failed to create movie",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/movie/get": {
      "get": {
        "description": "get movie by the given movie id.",
        "tags": [
          "movie"
        ],
        "summary": "get movie by given id.",
        "parameters": [
          {
            "type": "string",
            "description": "get movie by given id",
            "name": "id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "get the movie operations",
            "schema": {
              "$ref": "#/definitions/movie"
            }
          },
          "default": {
            "description": "failed to get movie",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "movie": {
      "type": "object",
      "required": [
        "title"
      ],
      "properties": {
        "genre": {
          "type": "string",
          "minLength": 2
        },
        "id": {
          "type": "integer",
          "format": "uuid.uuid",
          "readOnly": true
        },
        "title": {
          "type": "string",
          "minLength": 2
        }
      }
    }
  }
}`))
}
